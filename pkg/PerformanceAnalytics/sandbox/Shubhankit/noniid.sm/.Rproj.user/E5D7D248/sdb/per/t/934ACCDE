{
    "contents" : "#'@title Fitting Generalized Linear Models with HC and HAC Covariance Matrix Estimators\n#'@description\n#' glm is used to fit generalized linear models, specified by giving a symbolic description of the linear predictor and a description of the error distribution.\n#' @details\n#' see  \\code{\\link{glm}}.\n#' @param formula  \n#'an object of class \"formula\" (or one that can be coerced to that class): a symbolic description of the model to be fitted. The details of model specification are given under ‘Details’.\n#'\n#'@param family  \n#' a description of the error distribution and link function to be used in the model. This can be a character string naming a family function, a family function or the result of a call to a family function. (See family for details of family functions.)\n#'@param data  \n#'an optional data frame, list or environment (or object coercible by as.data.frame to a data frame) containing the variables in the model. If not found in data, the variables are taken from environment(formula), typically the environment from which lm is called.\n#'\n#'@param vcov HC-HAC covariance estimation\n#'@param weights  \n#'an optional vector of weights to be used in the fitting process. Should be NULL or a numeric vector. If non-NULL, weighted least squares is used with weights weights (that is, minimizing sum(w*e^2)); otherwise ordinary least squares is used. See also ‘Details’,\n#'@param subset\t\n#'an optional vector specifying a subset of observations to be used in the fitting process.\n#'\n#'\n#'@param na.action\t\n#'a function which indicates what should happen when the data contain NAs. The default is set by the na.action setting of options, and is na.fail if that is unset. The ‘factory-fresh’ default is na.omit. Another possible value is NULL, no action. Value na.exclude can be useful.\n#'\n#'@param start  \n#'starting values for the parameters in the linear predictor.\n#'\n#'@param etastart\t\n#'starting values for the linear predictor.\n#'\n#'@param mustart\t\n#'starting values for the vector of means.\n#'\n#'@param offset\t\n#'this can be used to specify an a priori known component to be included in the linear predictor during fitting. This should be NULL or a numeric vector of length equal to the number of cases. One or more offset terms can be included in the formula instead or as well, and if more than one is specified their sum is used. See model.offset.\n#'\n#'@param control\t\n#'a list of parameters for controlling the fitting process. For glm.fit this is passed to glm.control.\n#'\n#'@param model\t\n#' a logical value indicating whether model frame should be included as a component of the returned value.\n#'@param method\t\n#'the method to be used; for fitting, currently only method = \"qr\" is supported; method = \"model.frame\" returns the model frame (the same as with model = TRUE, see below).\n#'\n#'@param x logicals. If TRUE the corresponding components of the fit (the model frame, the model matrix, the response, the QR decomposition) are returned.\n#'@param y logicals. If TRUE the corresponding components of the fit (the model frame, the model matrix, the response, the QR decomposition) are returned.\n#'\n#'@param contrasts\t\n#'an optional list. See the contrasts.arg of model.matrix.default.\n#'\n#'@param \\dots\t\n#'additional arguments to be passed to the low level regression fitting functions (see below).\n#' @author The original R implementation of glm was written by Simon Davies working for Ross Ihaka at the University of Auckland, but has since been extensively re-written by members of the R Core team.\n#' The design was inspired by the S function of the same name described in Hastie & Pregibon (1992).\n#' @keywords HC HAC covariance estimation regression fitting model\n#' @rdname glmi\n#' @export\nglmi <- function (formula, family = gaussian, data,vcov = NULL, weights, subset, \n          na.action, start = NULL, etastart, mustart, offset, control = list(...), \n          model = TRUE, method = \"glm.fit\", x = FALSE, y = TRUE, contrasts = NULL, \n          ...) \n{\n  call <- match.call()\n  if (is.character(family)) \n    family <- get(family, mode = \"function\", envir = parent.frame())\n  if (is.function(family)) \n    family <- family()\n  if (is.null(family$family)) {\n    print(family)\n    stop(\"'family' not recognized\")\n  }\n  if (missing(data)) \n    data <- environment(formula)\n  mf <- match.call(expand.dots = FALSE)\n  m <- match(c(\"formula\", \"data\", \"subset\", \"weights\", \"na.action\", \n               \"etastart\", \"mustart\", \"offset\"), names(mf), 0L)\n  mf <- mf[c(1L, m)]\n  mf$drop.unused.levels <- TRUE\n  mf[[1L]] <- as.name(\"model.frame\")\n  mf <- eval(mf, parent.frame())\n  if (identical(method, \"model.frame\")) \n    return(mf)\n  if (!is.character(method) && !is.function(method)) \n    stop(\"invalid 'method' argument\")\n  if (identical(method, \"glm.fit\")) \n    control <- do.call(\"glm.control\", control)\n  mt <- attr(mf, \"terms\")\n  Y <- model.response(mf, \"any\")\n  if (length(dim(Y)) == 1L) {\n    nm <- rownames(Y)\n    dim(Y) <- NULL\n    if (!is.null(nm)) \n      names(Y) <- nm\n  }\n  X <- if (!is.empty.model(mt)) \n    model.matrix(mt, mf, contrasts)\n  else matrix(, NROW(Y), 0L)\n  weights <- as.vector(model.weights(mf))\n  if (!is.null(weights) && !is.numeric(weights)) \n    stop(\"'weights' must be a numeric vector\")\n  if (!is.null(weights) && any(weights < 0)) \n    stop(\"negative weights not allowed\")\n  offset <- as.vector(model.offset(mf))\n  if (!is.null(offset)) {\n    if (length(offset) != NROW(Y)) \n      stop(gettextf(\"number of offsets is %d should equal %d (number of observations)\", \n                    length(offset), NROW(Y)), domain = NA)\n  }\n  mustart <- model.extract(mf, \"mustart\")\n  etastart <- model.extract(mf, \"etastart\")\n  fit <- eval(call(if (is.function(method)) \"method\" else method, \n                   x = X, y = Y, weights = weights, start = start, etastart = etastart, \n                   mustart = mustart, offset = offset, family = family, \n                   control = control, intercept = attr(mt, \"intercept\") > \n                     0L))\n  if (length(offset) && attr(mt, \"intercept\") > 0L) {\n    fit2 <- eval(call(if (is.function(method)) \"method\" else method, \n                      x = X[, \"(Intercept)\", drop = FALSE], y = Y, weights = weights, \n                      offset = offset, family = family, control = control, \n                      intercept = TRUE))\n    if (!fit2$converged) \n      warning(\"fitting to calculate the null deviance did not converge -- increase 'maxit'?\")\n    fit$null.deviance <- fit2$deviance\n  }\n  if (model) \n    fit$model <- mf\n  fit$na.action <- attr(mf, \"na.action\")\n  if (x) \n    fit$x <- X\n  if (!y) \n    fit$y <- NULL\n  fit <- c(fit, list(call = call, formula = formula, terms = mt, \n                     data = data, offset = offset, control = control, method = method, \n                     contrasts = attr(X, \"contrasts\"), xlevels = .getXlevels(mt, \n                                                                             mf)))\n  class(fit) <- c(fit$class, c(\"glm\", \"lm\"))\n  fit\n  if(is.null(vcov)) {\n    se <- vcov(fit)\n  } else {\n    if (is.function(vcov))\n      se <- vcov(fit)\n    else\n      se <- vcov\n  }\n  fit = list(fit,vHaC = se) \n  fit\n  \n}",
    "created" : 1379107692126.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4199474922",
    "id" : "934ACCDE",
    "lastKnownWriteTime" : 1379111348,
    "path" : "C:/Users/shubhankit/Desktop/1 week/pkg/PerformanceAnalytics/sandbox/Shubhankit/noniid.sm/R/glmi.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}
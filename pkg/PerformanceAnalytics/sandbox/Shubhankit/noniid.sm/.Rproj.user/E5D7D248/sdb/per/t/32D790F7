{
    "contents" : "#'@title Fitting Generalized Linear Models with HC and HAC Covariance Matrix Estimators\n#'@description\n#' lm is used to fit generalized linear models, specified by giving a symbolic description of the linear predictor and a description of the error distribution.\n#' @details\n#' see  \\code{\\link{lm}}.\n#' @param formula  \n#'an object of class \"formula\" (or one that can be coerced to that class): a symbolic description of the model to be fitted. The details of model specification are given under ‘Details’.\n#'\n#'\n#'@param data\t\n#'an optional data frame, list or environment (or object coercible by as.data.frame to a data frame) containing the variables in the model. If not found in data, the variables are taken from environment(formula), typically the environment from which lm is called.\n#'\n#'@param vcov HC-HAC covariance estimation\n#'@param weights\t\n#'an optional vector of weights to be used in the fitting process. Should be NULL or a numeric vector. If non-NULL, weighted least squares is used with weights weights (that is, minimizing sum(w*e^2)); otherwise ordinary least squares is used. See also ‘Details’,\n#'\n#'\n#'@param subset  \n#'an optional vector specifying a subset of observations to be used in the fitting process.\n#'@param na.action\t\n#'a function which indicates what should happen when the data contain NAs. The default is set by the na.action setting of options, and is na.fail if that is unset. The ‘factory-fresh’ default is na.omit. Another possible value is NULL, no action. Value na.exclude can be useful.\n#'\n#'@param method\t\n#'the method to be used; for fitting, currently only method = \"qr\" is supported; method = \"model.frame\" returns the model frame (the same as with model = TRUE, see below).\n#'\n#'@param model logicals. If TRUE the corresponding components of the fit (the model frame, the model matrix, the response, the QR decomposition) are returned.\t\n#'@param x logicals. If TRUE the corresponding components of the fit (the model frame, the model matrix, the response, the QR decomposition) are returned.\n#'@param y logicals. If TRUE the corresponding components of the fit (the model frame, the model matrix, the response, the QR decomposition) are returned.\n#'@param qr logicals. If TRUE the corresponding components of the fit (the model frame, the model matrix, the response, the QR decomposition) are returned.\n#'@param singular.ok\t\n#'logical. If FALSE (the default in S but not in R) a singular fit is an error.\n#'\n#'@param contrasts\t\n#'an optional list. See the contrasts.arg of model.matrix.default.\n#'\n#'@param offset\t\n#'this can be used to specify an a priori known component to be included in the linear predictor during fitting. This should be NULL or a numeric vector of length equal to the number of cases. One or more offset terms can be included in the formula instead or as well, and if more than one are specified their sum is used. See model.offset.\n#'\n#'@param \\dots\t\n#'additional arguments to be passed to the low level regression fitting functions (see below).\n#' @author The original R implementation of glm was written by Simon Davies working for Ross Ihaka at the University of Auckland, but has since been extensively re-written by members of the R Core team.\n#' The design was inspired by the S function of the same name described in Hastie & Pregibon (1992).\n#' @keywords HC HAC covariance estimation regression fitting model\n#' @rdname lmi\n#' @export\nlmi <- function (formula, data,vcov = NULL, subset, weights, na.action, method = \"qr\", \n          model = TRUE, x = FALSE, y = FALSE, qr = TRUE, singular.ok = TRUE, \n          contrasts = NULL, offset, ...) \n{\n  ret.x <- x\n  ret.y <- y\n  cl <- match.call()\n  mf <- match.call(expand.dots = FALSE)\n  m <- match(c(\"formula\", \"data\", \"subset\", \"weights\", \"na.action\", \n               \"offset\"), names(mf), 0L)\n  mf <- mf[c(1L, m)]\n  mf$drop.unused.levels <- TRUE\n  mf[[1L]] <- as.name(\"model.frame\")\n  mf <- eval(mf, parent.frame())\n  if (method == \"model.frame\") \n    return(mf)\n  else if (method != \"qr\") \n    warning(gettextf(\"method = '%s' is not supported. Using 'qr'\", \n                     method), domain = NA)\n  mt <- attr(mf, \"terms\")\n  y <- model.response(mf, \"numeric\")\n  w <- as.vector(model.weights(mf))\n  if (!is.null(w) && !is.numeric(w)) \n    stop(\"'weights' must be a numeric vector\")\n  offset <- as.vector(model.offset(mf))\n  if (!is.null(offset)) {\n    if (length(offset) != NROW(y)) \n      stop(gettextf(\"number of offsets is %d, should equal %d (number of observations)\", \n                    length(offset), NROW(y)), domain = NA)\n  }\n  if (is.empty.model(mt)) {\n    x <- NULL\n    z <- list(coefficients = if (is.matrix(y)) matrix(, 0, \n                                                      3) else numeric(), residuals = y, fitted.values = 0 * \n                y, weights = w, rank = 0L, df.residual = if (!is.null(w)) sum(w != \n                                                                                0) else if (is.matrix(y)) nrow(y) else length(y))\n    if (!is.null(offset)) {\n      z$fitted.values <- offset\n      z$residuals <- y - offset\n    }\n  }\n  else {\n    x <- model.matrix(mt, mf, contrasts)\n    z <- if (is.null(w)) \n      lm.fit(x, y, offset = offset, singular.ok = singular.ok, \n             ...)\n    else lm.wfit(x, y, w, offset = offset, singular.ok = singular.ok, \n                 ...)\n  }\n  class(z) <- c(if (is.matrix(y)) \"mlm\", \"lm\")\n  z$na.action <- attr(mf, \"na.action\")\n  z$offset <- offset\n  z$contrasts <- attr(x, \"contrasts\")\n  z$xlevels <- .getXlevels(mt, mf)\n  z$call <- cl\n  z$terms <- mt\n  if (model) \n    z$model <- mf\n  if (ret.x) \n    z$x <- x\n  if (ret.y) \n    z$y <- y\n  if (!qr) \n    z$qr <- NULL\n  #z\n  if(is.null(vcov)) {\n    se <- vcov(z)\n  } else {\n    if (is.function(vcov))\n      se <- vcov(z)\n    else\n      se <- vcov\n  }\n  z = list(z,vHaC = se) \n  z\n}\n",
    "created" : 1379107697415.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2819201039",
    "id" : "32D790F7",
    "lastKnownWriteTime" : 1379110731,
    "path" : "C:/Users/shubhankit/Desktop/1 week/pkg/PerformanceAnalytics/sandbox/Shubhankit/noniid.sm/R/lmi.R",
    "properties" : {
    },
    "source_on_save" : true,
    "type" : "r_source"
}
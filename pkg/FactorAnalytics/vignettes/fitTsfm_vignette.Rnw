\documentclass[a4paper]{article}
\usepackage{Rd}
\usepackage{amsmath}
\usepackage[round]{natbib}
\usepackage{bm}
\usepackage{verbatim}
\usepackage[latin1]{inputenc}
\bibliographystyle{abbrvnat}
\usepackage{url}

\let\proglang=\textsf
\renewcommand{\topfraction}{0.85}
\renewcommand{\textfraction}{0.1}
\renewcommand{\baselinestretch}{1.5}
\setlength{\textwidth}{15cm} \setlength{\textheight}{22cm} \topmargin-1cm \evensidemargin0.5cm \oddsidemargin0.5cm

\usepackage{lmodern}
\usepackage[T1]{fontenc}

% \VignetteIndexEntry{Fitting a time series factor model with 'fitTsfm' in factorAnalytics}
%\VignetteEngine{knitr::knitr}

\begin{document}

\title{Fitting Time Series Factor Models: factorAnalytics vignette}
\author{Sangeetha Srinivasan}
\maketitle

\begin{abstract}
The purpose of this vignette is to demonstrate the use of \code{fitTsfm} and related control, analysis and plot functions in the \code{factorAnalytics} package.
\end{abstract}

\tableofcontents
\bigskip

\newpage
\section{Overview}

\subsection{Load Package}

The latest version of the \verb"factorAnalytics" package can be downloaded from R-forge through the following command:
\begin{verbatim}
install.packages("factorAnalytics", repos="http://R-Forge.R-project.org")
\end{verbatim}
Load the package and it's dependencies.
<<message=FALSE>>=
library(factorAnalytics)
options(digits=3)
@

\subsection{Summary of related functions}
Here's a list of the functions and methods demonstrated in this vignette:

\begin{itemize}

\item \verb"fitTsfm(asset.names, factor.names, data, fit.method, variable.selection)": Fits a time series (a.k.a. macroeconomic) factor model for one or more asset returns or excess returns using time series regression. Ordinary least squares (OLS), discounted least squares (DLS) and robust regression fitting are possible. Variable selection methods include "stepwise", "subsets" and "lars". An object of class "tsfm" containing the fitted objects, model coefficients, R-squared and residual volatility are returned.

\item \verb"coef(object)": Extracts the coefficient matrix (intercept and factor betas) for all assets fit by the "tsfm" object.

\item \verb"fitted(object)": Returns an "xts" data object of fitted asset returns from the factor model for all assets.

\item \verb"residuals(object)": Returns an "xts" data object of residuals from the fitted factor model for all assets.

\item \verb"fmCov(object, use)": Returns the \code{N x N} symmetric covariance matrix for asset returns based on the fitted factor model. \code{"use"} specifies how missing values are to be handled.

\item \verb"fmSdDecomp(object, use)": Returns a list containing the standard deviation of asset returns based on the fitted factor model and the marginal, component and percentage component factor contributions estimated from the given sample. \code{"use"} specifies how missing values are to be handled.

\item \verb"fmVaRDecomp(object, p, method, invert)": Returns a list containing the value-at-risk for asset returns based on the fitted factor model and the marginal, component and percentage component factor contributions estimated from the given sample. \code{"p"} and \code{"method"} specify the confidence level and method (one of "modified","gaussian", "historical" or "kernel") to calculate  VaR. VaR is by default a positive quantity and specifying \code{"invert=TRUE"} allows the VaR value to be expressed as a negative quantity. These 3 arguments, \code{"p"}, \code{"method"} and \code{"invert"} are passed on to the \code{VaR} function in the \code{PerformanceAnalytics} package to calculate VaR.

\item \verb"fmEsDecomp(object, p, method, invert)": Returns a list containing the expected shortfall for asset returns based on the fitted factor model and the marginal, component and percentage component factor contributions estimated from the given sample. Arguments \code{"p"}, \code{"method"} and \code{invert} are the same as above.

\item \verb"plot(x)": The \code{plot} method for class "tsfm" can be used for plotting factor model characteristics of an individual asset or a group of assets (default). The type of individual/group plot can be specified or chosen from a menu prompt (default if type not specified). Further the menu reappears (default) to enable multiple plots for the same asset(s) unless looping is disabled by setting \code{loop=FALSE}.

\item \verb"predict(object, newdata)": The \code{predict} method for class "tsfm" returns a vector or matrix of predicted values for a new data sample or simulated values.

\item \verb"summary(object, se.type)": The \code{summary} method for class "tsfm" returns an object of class \code{"summary.tsfm"} containing the summaries of the fitted "lm", "lmRob" or "lars" objects and the chosen type (HC/HAC) of standard errors and t-statistics to display. Printing the factor model summary object outputs the call, coefficients (with standard errors and t-statistics), r-squared and residual volatility (under the homo-skedasticity assumption) for all assets. 

\end{itemize}

\subsection{Data}

The following examples primarily use the \code{managers} dataset from the \verb"PerformanceAnalytics" package. It's an "xts" data object with 132 observations on 10 variables; frequency is monthly. 
<<>>=
data(managers)
colnames(managers)
range(index(managers))
@ 

In the examples below, the monthly returns for the six hypothetical asset managers (HAM1 through HAM6) will be the explained asset returns. Columns 7 through 9, composed of the EDHEC Long-Short Equity hedge fund index, the S\&P 500 total returns, and the total return series for the US Treasury 10-year bond will serve as explanatory factors. The last column (US 3-month T-bill) can be considered as the risk free rate. The series have unequal histories in this sample and \code{fitTsfm} removes asset-wise incomplete cases (asset's return data combined with respective factors' return data) before fitting a factor model.
<<>>=
asset.names <- colnames(managers[,1:6]) 
factor.names <- colnames(managers[,7:9])
mkt.name <- "SP500 TR"
rf.name <- "US 3m TR"
@

Typically, factor models are fit using excess returns. If the asset and factor returns are not in excess return form, \code{rf.name} can be specified to convert returns into excess returns. Similarly, market returns can be specified via \code{mkt.name} to add market-timing factors to the factor model.

The \verb"CommonFactors" dataset in the \verb"factorAnalytics" package also provides a collection of common factors as both monthly (\verb"factors.M") and quarterly (\verb"factors.Q") time series. Refer to the help file for the dataset for more information.

<<>>=
data(CommonFactors)
names(factors.Q)
range(index(factors.Q))
@

\newpage
\section{Fit a time series factor model}

In a time series or macroeconomic factor model, observable economic time series such as industrial production growth rate, interest rates, market returns and inflation are used as common factors that contribute to asset returns. For example, the famous single index model by \citet{sharpe1964capital} uses the market excess return as the common factor (captures economy-wide or market risk) for all assets and the unexplained returns in the error term represents the non-market firm specific risk. On the other hand, \citet{chen1986economic} uses a multi-factor model to find that surprise inflation, the spread between long and short-term interest rates and between high and low grade bonds are significantly priced, while the market portfolio, aggregate consumption risk and oil price risk are not priced separately. 

Let's take a look at the arguments for \code{fitTsfm}.

<<tidy=TRUE>>=
args(fitTsfm)
@

The default model fitting method is OLS regression and the default variable selection method is "none" (that is, all factors are included in the model). The different model fitting and variable selection options are described in sections 2.3 and 2.4.

The default for \code{rf.name} and \code{mkt.name} are NULL. If \code{rf.name} is not specified by the user, perhaps because the data is already in excess return form, then no risk-free rate adjustment is made. Similarly, if \code{mkt.name} is not specified, market-timing factors are not added to the model.

All other optional control parameters passed through the ellipsis are processed and assimilated internally by \code{fitTsfm.control}. More on that in section 2.5.

\subsection{Single Index Model}

Here's an implementation of the single index model for the 6 hypothetical assets described in section 1.3 earlier. Since \code{rf.name} was included, excess returns are computed and used for all variables during model fitting. 
<<>>=
# Single Index Model using SP500
fit.singleIndex <- fitTsfm(asset.names=asset.names, factor.names="SP500 TR", 
                           rf.name="US 3m TR", data=managers)
@

The resulting object, \code{fit.singleIndex}, has the following attributes.
<<>>=
class(fit.singleIndex)
names(fit.singleIndex)
@

The component \code{asset.fit} contains a list of "lm" objects\footnotemark[1], one for each asset. The estimated coefficients\footnotemark[2] are in \code{alpha} and \code{beta}. R-squared and residual standard deviations are in \code{r2} and \code{resid.sd} respectively. The remaining components contain the input choices and the data.

\footnotetext[1]{The fitted objects can be of class "lm", "lmRob" or "lars" depending on the fit and variable selection methods.}

\footnotetext[2]{Refer to the summary method in section 2.6 for standard errors, degrees of freedom, t-statistics etc.}

<<>>=
fit.singleIndex # print the fitted "tsfm" object
@

\subsection{Market Timing Models}

In the following example, we fit the \citet{henriksson1981market} market timing model, using the SP500 as the market. Market timing accounts for the price movement of the general stock market relative to fixed income securities. Specifying \code{mkt.timing="HM"}, includes $up.market = max(0, R_m-R_f)$ as a factor. 
<<>>=
# Henriksson-Merton's market timing model
fit.mktTiming <- fitTsfm(asset.names=asset.names, rf.name="US 3m TR", 
                         mkt.name="SP500 TR", mkt.timing="HM", data=managers)
fit.mktTiming
@

Similarly, to account for market timing with respect to volatility, one can specify \code{mkt.timing="TM"}. Following \citet{treynor1966can}, $market.sqd = (R_m-R_f)^2$ is added as a factor. To include both these market-timing factors in the model, one can specify \code{mkt.timing=c("HM","TM")}. 

Note that, the user needs to specify which of the columns in \code{data} corresponds to the market returns using argument \code{mkt.name}. In the above case, \code{factor.names} were left out from the argument list and a pure market-timing model was fit.

\subsection{Fit methods}

The default fit method is OLS regression. The next example performs OLS regression using all 3 available factors in the dataset. Notice that the R-squared values have improved considerably when compared to the single index model as well as the market-timing model.
<<>>=
fit.ols <- fitTsfm(asset.names=asset.names, factor.names=factor.names, 
                    rf.name="US 3m TR", data=managers)
fit.ols$beta
fit.ols$r2
fit.ols$resid.sd
@ 

Other options include discounted least squares (\code{"DLS"}) and robust regression (\code{"Robust"}). DLS is least squares regression using exponentially discounted weights and accounts for time variation in coefficients. Robust regression is resistant to outliers and heteroskedasticity. 
<<>>=
fit.robust <- fitTsfm(asset.names=asset.names, factor.names=factor.names, 
                       rf.name="US 3m TR", data=managers, fit.method="Robust")
fit.robust$beta
fit.robust$r2
fit.robust$resid.sd
@

Notice the lower R-squared values and smaller residual volatilities with robust regression. Figures 1 and 2 give a graphical comparison of the fitted returns for asset "HAM3" and residual volatilities from the factor model fits. Figure 1 depicts the smaller influence that the volatility of Jan 2000 has on the robust regression. (Plot options are explained later in section 4.)
<<fig.cap="HAM3 Returns: OLS (top) vs Robust (bottom)", fig.show='hold'>>=
par(mfrow=c(2,1))
plot(fit.ols, plot.single=TRUE, which.plot.single=1, asset.name="HAM3", loop=FALSE)
mtext("OLS", side=3)
plot(fit.robust, plot.single=TRUE, which.plot.single=1, asset.name="HAM3", loop=FALSE)
mtext("Robust", side=3)
@

<<fig.cap="Residual vol: OLS (left) vs Robust (right)", fig.width=3, fig.height=2.5, out.width='.49\\linewidth', fig.show='hold'>>=
par(mfrow=c(1,2))
plot(fit.ols, which.plot.group=5, loop=FALSE, xlim=c(0,0.043), sub="OLS")
plot(fit.robust, which.plot.group=5, loop=FALSE, xlim=c(0,0.043), sub="Robust")
@

\subsection{Variable Selection}

Though the R-squared values improved by adding more factors in fit.ols (compared to the single index model), one might prefer to employ variable selection methods such as "stepwise", "subsets" or "lars" to avoid over-fitting. The method can be selected via the \code{variable.selection} argument. The default "none", uses all the factors and performs no variable selection. 

Specifying "stepwise" selects traditional stepwise\footnotemark[3] LS or robust regression using \code{step} or \code{step.lmRob} respectively. Starting from the given initial set of factors, factors are added (or subtracted) only if the regression fit, as measured by the Bayesian Information Criterion (BIC) or Akaike Information Criterion (AIC)\footnotemark[4], improves. 

Specifying "subsets" enables subsets selection using \code{regsubsets}. The best performing subset of any given size or within a range of subset sizes is chosen. Different methods such as exhaustive search (default), forward or backward stepwise, or sequential replacement can be employed.

Finally, "lars" corresponds to least angle regression using \code{lars} with variants "lasso" (default), "lar", "forward.stagewise" or "stepwise".  

\footnotetext[3]{The direction for stepwise search can be one of "forward", "backward" or "both". See the help file for more details.}

\footnotetext[4]{AIC is the default. When the additive constant can be chosen so that AIC is equal to Mallows' Cp, this is done. The optional control parameter \code{k} can be used to switch to BIC instead.}

The next example uses the \code{"lars"} variable selection method. The default type and criterion used are \code{"lasso"} and the \code{"Cp"} statistic.
<<fig.show='hide'>>=
fit.lars <- fitTsfm(asset.names=asset.names, factor.names=factor.names, 
                    data=managers, rf.name="US 3m TR", 
                    variable.selection="lars")
fit.lars
@

\newpage
Using the same set of factors for comparison, let's fit another model using the \code{"subsets"} variable selection method. Here, the best subset of size 2 for each asset is chosen. 
<<>>=
fit.sub <- fitTsfm(asset.names=asset.names, factor.names=factor.names, 
                   data=managers, rf.name="US 3m TR", 
                   variable.selection="subsets", nvmin=2, nvmax=2)
fit.sub
@

Comparing the coefficients and R-squared values from the two models, we find that the method that uses more factors for an asset have higher R-squared values as expected. However, when both "lars" and "subsets" chose the same number of factors, "lars" fits have a slightly higher R-squared values.  

The Figures 3 and 4 display the factor betas from the two fits.
<<fig.cap="Factor betas: fit.sub", fig.show='hold'>>=
plot(fit.sub, which.plot.group=2, loop=FALSE)
@

<<fig.cap="Factor betas: fit.lars", fig.show='hold'>>=
plot(fit.lars, which.plot.group=2, loop=FALSE)
@

Remarks:
\begin{itemize}
\item Variable selection methods \code{"stepwise"} and \code{"subsets"} can be combined with any of the fit methods, "OLS", "DLS" or "Robust". If variable selection method selected is \code{"lars"}, \code{fit.method} will be ignored. 
\item Refer to the next section on \code{fitTsfm control} for more details on the control arguments that can be passed to the different variable selection methods. 
\end{itemize}

\subsection{fitTsfm control}

Since \code{fitTsfm} calls many different regression fitting and variable selection methods, it made sense to collect all the optional controls for these functions and process them via \code{fitTsfm.control}. This function is meant to be used internally by \code{fitTsfm} when arguments are passed to it via the ellipsis. The use of control parameters was demonstrated with \code{nvmax} and \code{nvmin} in the fit.sub example earlier. 

For easy reference, here's a classified list of control parameters accepted and passed by \code{fitTsfm} to their respective model fitting (or) model selection functions in other packages. See the corresponding help files for more details on each parameter.
\begin{itemize}
\item \verb"lm": "weights","model","x","y","qr"
\item \verb"lmRob": "weights","model","x","y","nrep"
\item \verb"step": "scope","scale","direction","trace","steps","k"
\item \verb"regsubsets": "weights","nvmax","force.in","force.out","method","really.big"
\item \verb"lars": "type","normalize","eps","max.steps","trace"
\item \verb"cv.lars": "K","type","normalize","eps","max.steps","trace"
\end{itemize}

There are 3 other significant arguments that can be passed through the \code{...} argument to \code{fitTsfm}.
\begin{itemize}
\item \verb"decay": Determines the decay factor for DLS fit method, which corresponds to exponentially weighted least squares, with weights adding to unity.
\item \verb"nvmin": The lower limit for the range of subset sizes from which the best model (BIC) is found when performing "subsets" selection. Note that the upper limit was already passed to \code{regsubsets} function. By specifying \code{nvmin=nvmax}, users can obtain the best model of a particular size (meaningful to those who want a parsimonious model, or to compare with a different model of the same size, or perhaps to avoid over-fitting/ data dredging etc.).
\item \verb"lars.criterion": An option (one of "Cp" or "cv") to assess model selection for the \code{"lars"} variable selection method. "Cp" is Mallow's Cp statistic and "cv" is K-fold cross-validated mean squared prediction error.
\end{itemize}

\newpage
\subsection{Summary, Predict, Coefficients, Fitted values and Residuals}

<<>>=
methods(class="tsfm")
@

Many useful generic accessor functions are available for "tsfm" fit objects. \code{coef()} returns a matrix of estimated model coefficients including the intercept. \code{fitted()} returns an xts data object of the component of asset returns explained by the factor model. \code{residuals()} returns an xts data object with the component of asset returns not explained by the factor model. 
\code{predict()} uses the fitted factor model to estimate asset returns given a set of new or simulated factor return data.  

\code{summary()} prints standard errors and t-statistics for all estimated coefficients in addition to R-squared values and residual volatilities. The \code{se.type} argument enables computing heteroskedasticity and auto-correlation consistent ("HC" and "HAC") estimates and standard errors whenever possible. A "summary.tsfm" object is returned which contains the summary objects returned by "lm", "lm.Rob" or "lars" for each asset fit. 

Note: Standard errors are currently not available for the "lars" variable selection method, as there seems to be no consensus on a statistically valid method of calculating standard errors for the lasso predictions.

Here are some examples using the time series factor models fitted earlier.
<<>>=
# all estimated coefficients from the OLS fit using all 3 factors
coef(fit.ols)

# compare returns data with fitted and residual values for HAM1 from fit.lars
HAM1.ts <- merge(fit.lars$data[,1], fitted(fit.lars)[,1], 
                      residuals(fit.lars)[,1])
colnames(HAM1.ts) <- c("HAM1.return","HAM1.fitted","HAM1.residual")
tail(HAM1.ts)

# summary for fit.sub computing HAC standard erros
summary(fit.sub, se.type="HAC")
@

\newpage
\section{Factor Model Covariance \& Risk Decomposition}

\subsection{Factor model covariance}

Following \citet{zivot2006modeling}, $R_{i, t}$, the return on asset $i$ ($i = 1, ..., N$) at time $t$ ($t = 1, ..., T$), is fitted with a factor model of the form,
\begin{equation}
R_{i,t} = \alpha_i + \bm\beta_i \: \mathbf{f_t} + \epsilon_{i,t}
\end{equation}
where, $\alpha_i$ is the intercept, $\mathbf{f_t}$ is a $K \times 1$ vector of factor returns at time $t$, $\bm\beta_i$ is a $1 \times K$ vector of factor exposures for asset $i$ and the error terms $\epsilon_{i,t}$ are serially uncorrelated across time and contemporaneously uncorrelated across assets so that $\epsilon_{i,t} \sim iid(0, \sigma_i^2)$. Thus, the variance of asset $i$'s return is given by 
\begin{equation}
var(R_{i,t}) = \bm\beta_i\: var(\mathbf{f_t})\: \bm\beta_i' + \sigma_i^2
\end{equation}

And, the $N \times N$ covariance matrix of asset returns is
\begin{equation}
var(\mathbf{R}) = \bm\Omega = \mathbf{B}\: var(\mathbf{F})\: \mathbf{B}' + \mathbf{D}
\end{equation}
where, $R$ is the $N \times T$ matrix of asset returns, $B$ is the $N \times K$ matrix of factor betas, $\mathbf{F}$ is a $K \times T$ matrix of factor returns and $D$ is a diagonal matrix with $\sigma_i^2$ along the diagonal.

\code{fmCov()} computes the factor model covariance from a fitted factor model. Options for handling missing observations include "pairwise.complete.obs" (default), "everything", "all.obs", "complete.obs" and "na.or.complete".

<<fig.cap="Factor model return correlation (pairwise complete obs)">>=
fmCov(fit.sub)
# return correlation plot; Angular Order of the Eigenvectors
plot(fit.sub, which.plot.group=7, loop=FALSE, order="AOE", method="ellipse", 
     tl.pos = "d")
@

\subsection{Standard deviation decomposition}

Given the factor model in equation 1, the standard deviation of the asset $i$'s return can be decomposed as follows (based on \citet{meucci2007risk}):
\begin{align}
R_{i,t} &= \alpha_i + \bm\beta_i \: \mathbf{f_t} + \epsilon_{i,t} \\
&=  \bm\beta_i^* \: \mathbf{f_t^*}
\end{align}
where, $\bm\beta_i^* = (\bm\beta_i \: \sigma_i)$ and $\mathbf{f_t^*} = [\mathbf{f_t'} \: z_t]'$, with $z_t \sim iid(0, 1)$.

By Euler's theorem, the standard deviation of asset $i$'s return is:
\begin{align}
Sd.fm_i = \sum_{k=1}^{K+1} cSd_{i,k} = \sum_{k=1}^{K+1} \beta^*_{i,k} \: mSd_{i,k}
\end{align}
where, summation is across the $K$ factors and the residual, $\mathbf{cSd_i}$ and $\mathbf{mSd_i}$ are the component and marginal contributions to $Sd.fm_i$ respectively. Computing $Sd.fm_i$ and $\mathbf{mSd_i}$ is very straight forward. The formulas are given below and details are in \citet{meucci2007risk}. The covariance term is approximated by the sample covariance.
\begin{align}
& Sd.fm_i = \sqrt{\bm\beta_i^*\: cov(\mathbf{F^*})\: \bm\beta_i^{*'}} \\
& \mathbf{mSd_i} = \frac{cov(\mathbf{F^*})\: \bm\beta_i^*}{Sd.fm_i} \\
& \mathbf{cSd_i} = \bm\beta_i^* \: \mathbf{mSd_i}
\end{align}

\code{fmSdDecomp} performs this decomposition for all assets in the given factor model fit object as shown below.

<<fig.cap="Percentage factor contribution to SD">>=
decomp <- fmSdDecomp(fit.sub)
names(decomp)
# get the factor model standard deviation for all assets
decomp$Sd.fm
# get the component contributions to Sd
decomp$cSd
# get the marginal factor contributions to Sd
decomp$mSd
# get the percentage component contributions to Sd
decomp$pcSd
# plot the percentage component contributions to Sd
plot(fit.sub, which.plot.group=8, loop=FALSE)
@
\newpage

\subsection{Value-at-Risk decomposition}

The VaR version of equation 6 is given below. By Euler's theorem, the value-at-risk of asset $i$'s return is:
\begin{equation}
VaR.fm_i = \sum_{k=1}^{K+1} cVaR_{i,k} = \sum_{k=1}^{K+1} \beta^*_{i,k} \: mVaR_{i,k}
\end{equation}

The marginal contribution to $VaR.fm$ is defined as the expectation of $F.star$, conditional on the loss being equal to $VaR.fm$. This is approximated as described in \citet{epperlein2006portfolio} using a triangular smoothing kernel. $VaR.fm$ calculation is performed using the function \code{VaR} from the \verb"PerformanceAnalytics" package. Refer to their help file for details and more options.

\code{fmVaRDecomp} performs this decomposition for all assets in the given factor model fit object as shown below.

<<fig.cap="Percentage factor contribution to VaR">>=
decomp1 <- fmVaRDecomp(fit.sub)
names(decomp1)
# get the factor model value-at-risk for all assets
decomp1$VaR.fm
# get the percentage component contributions to VaR
decomp1$pcVaR
# plot the percentage component contributions to VaR
plot(fit.sub, which.plot.group=10, loop=FALSE)
@

\subsection{Expected Shortfall decomposition}

The Expected Shortfall (ES) version of equation 6 is given below. By Euler's theorem, the expected shortfall of asset $i$'s return is:
\begin{equation}
ES.fm_i = \sum_{k=1}^{K+1} cES_{i,k} = \sum_{k=1}^{K+1} \beta^*_{i,k} \: mES_{i,k}
\end{equation}

The marginal contribution to $ES.fm$ is defined as the expectation of $F.star$, conditional on the loss being less than or equal to $VaR.fm$. This is estimated as a sample average of the observations in that data window. Once again, $VaR.fm$ calculation is performed using the function \code{VaR} from the \verb"PerformanceAnalytics" package. Refer to their help file for details and more options.

\code{fmEsDecomp} performs this decomposition for all assets in the given factor model fit object as shown below. In this example, \code{method} to calculate VaR is "historical" instead of the default "modified".
<<fig.cap="Percentage factor contribution to ES">>=
decomp2 <- fmEsDecomp(fit.sub, method="historical")
names(decomp2)
# get the factor model expected shortfall for all assets
decomp2$ES.fm
# get the component contributions to Sd
decomp2$cES
# get the marginal factor contributions to ES
decomp2$mES
# get the percentage component contributions to ES
decomp2$pcES
# plot the percentage component contributions to ES
plot(fit.sub, which.plot.group=9, loop=FALSE)
@

\newpage

\section{Plot}

Many types of individual asset (Figure 1) and group plots (Figures 2-8) have already been demonstrated. Let's take a look at all available arguments for plotting a "tsfm" object.
<<eval=FALSE>>=
## S3 method for class "tsfm"
plot(x, which.plot.group=NULL, max.show=6, plot.single=FALSE, asset.name, 
     which.plot.single=NULL, colorset=(1:12), legend.loc="topleft", las=1, 
     VaR.method="historical", loop=TRUE, ...)
@

\subsection{Menu and looping}

If the plot type argument (\code{which.plot.single} or \code{which.plot.group}) is not specified, a menu prompts for user input and the corresponding plot is output. Then, the menu is repeated (default) for user convenience in plotting multiple characteristics. Selecting '0' from the menu exits the current \code{plot.tsfm} call. Alternately, setting \code{loop=FALSE} will exit after plotting any one chosen characteristic without the need for menu selection.

For group plots (the default), the first \code{max.show} assets are plotted. For individual plots, \code{asset.name} is necessary if multiple assets were modeled in \code{x} and \code{plot.single=TRUE}. However, if the \code{fitTsfm} object \code{x} only contains one asset's factor model fit, \code{plot.tsfm} can infer this automatically, without user input. 

Remarks:
\begin{itemize}
\item CUSUM plots (individual asset plot options 10, 11 and 12) are applicable 
only for \code{fit.method="OLS"}.
\item Rolling estimates (individual asset plot option 13) is not applicable for 
\code{variable.slection="lars"}.
\item \code{VaR.method} applies to group plots 9 and 10 (see menu in the next section), which are factor model risk ES and VaR decompositions respectively.
\end{itemize}

\subsection{Group plots}

This is the default option for plotting. Simply running \code{plot(fit)}, where \code{fit} is a "tsfm" object, will bring up a menu (shown below) for group plots.
<<eval=FALSE, results='hide'>>=
plot(fit.sub)

## Make a plot selection (or 0 to exit): 
## 
##  1: Factor model coefficients: Alpha
##  2: Factor model coefficients: Betas
##  3: Actual and Fitted asset returns
##  4: R-squared
##  5: Residual Volatility
##  6: Factor Model Residual Correlation
##  7: Factor Model Return Correlation
##  8: Factor Contribution to SD
##  9: Factor Contribution to ES
## 10: Factor Contribution to VaR
## 
## Selection: 
@

Here's an example where the looping is disabled and the number of assets displayed is restricted to 4.
<<fig.cap="Actual and fitted factor model returns for the 1st 4 assets">>=
plot(fit.sub, which.plot.group=3, max.show=4, legend.loc=NULL, loop=FALSE)
@
\newpage

\subsection{Individual plots}

Setting \code{plot.single=TRUE} enables individual asset plots. If there are more than one asset fit by the fit object, \code{asset.name} is also necessary. Here's the individual plot menu.
<<eval=FALSE, results='hide'>>=
plot(fit.sub, plot.single=TRUE, asset.name="HAM1")

## Make a plot selection (or 0 to exit): 
## 
##  1: Time series plot of actual and fitted asset returns
##  2: Time series plot of residuals with standard error bands
##  3: Time series plot of squared residuals
##  4: Time series plot of absolute residuals
##  5: SACF and PACF of residuals
##  6: SACF and PACF of squared residuals
##  7: SACF and PACF of absolute residuals
##  8: Histogram of residuals with normal curve overlayed
##  9: Normal qq-plot of residuals
## 10: CUSUM test-Recursive residuals
## 11: CUSUM test-OLS residuals
## 12: Recursive estimates (RE) test of OLS regression coefficients
## 13: Rolling estimates over a 24-period observation window
## 
## Selection: 
@

Here are a few more examples.
<<fig.cap="Time series plot of residuals with standard error bands: HAM1", fig.show='hold'>>=
plot(fit.sub, plot.single=TRUE, asset.name="HAM1", which.plot.single=2, 
     loop=FALSE)
@

<<fig.cap="SACF and PACF of absolute residuals: HAM1", fig.show='hold'>>=
plot(fit.sub, plot.single=TRUE, asset.name="HAM1", which.plot.single=7, 
     loop=FALSE)
@

<<fig.cap="Histogram of residuals with normal curve overlayed for HAM1", fig.show='hold'>>=
plot(fit.sub, plot.single=TRUE, asset.name="HAM1", which.plot.single=8, 
     loop=FALSE)
@
\newpage

\bibliography{FA}

\end{document}
